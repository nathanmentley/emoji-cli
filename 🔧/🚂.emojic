💭🔜
    clihelper - A CLI Library for Emojicode.

    Copyright 2019 Nathan Mentley
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
🔚💭

📗 🚂 class <- Main App Class. Runs confirgured commands based on passed arguments. 📗
🌍 🐇 🚂 🍇
  🖍🆕 name 🔡
  🖍🆕 description 🔡
  🖍🆕 version 💯
  🖍🆕 commands 🍯🐚👑🍆

  💭 init
  🆕 🍼 name 🔡 🍼 description 🔡  🍼 version 💯 🍇
    💭 setup command dictionary.
    🆕🍯🐚👑🍆🐸❗️➡️  🖍 commands
  🍉

  💭 getters

  📗 Returns a collection of command parameter definitions 📗
  🔓 ❓ 📛 ➡️ 🔡🍇
    ↩️  name
  🍉

  📗 Returns a description of the command. This is used for the help display to explain the command to the user. 📗
  🔓 ❓ 💬 ➡️ 🔡🍇
    ↩️  description
  🍉

  📗 Returns a collection of command parameter definitions 📗
  🔓 ❓ ♾ ➡️ 💯🍇
    ↩️  version
  🍉

  📗 Gets the command dictionary 📗
  🔓 ❓ 🔗 ➡️  🍯🐚👑🍆 🍇
    ↩️  commands
  🍉

  💭 setters
  
  📗 Registers a command into the app. 📗
  🔓 ➡️  🔗 logic ⚙ 🍇
     💭 wrap ⚙ delegate in an instance of our 👑 class.. and push that into the commands dictionary.
     🆕 👑 🆕 logic ❗️ ➡️  🐽 commands 📪 📛 logic ❓❗️❗️
  🍉

  💭 logic
  
  📗 Executes the app based on all the registered commands and program arguments. 📗
  🔓 ❗️ 🏃 ➡️  🚨✋🔢 🍇
    🆕 🗺 🆕 ❗️ ➡️  context
    📛 context❓ ➡️  commandName
    
    💭 If no command is passed throw eeror
    ↪️ commandName 🙌 🤷 🍇
      ↪️ 🐽commands 📪🔤Help🔤❗️❗️ ➡️  command 🍇
        ↩️ 🏃 command context ❗️
      🍉
      🙅 🍇
         🚨🆕✋🙎❗️
      🍉
    🍉
    🙅 🍇
      💭 else lets try to pull the command out of the registered commands
      ↪️ commandName➡️ commandName🍇
        💭 If argument [1] is the name of a command unwrap it and run it.
        ↪️ 🐽commands 📪commandName ❗️❗️ ➡️  command 🍇
          ↩️ 🏃 command context ❗️
        🍉
        🙅 🍇
          💭 else try to run the built in help command
          ↪️ 🐽commands 📪🔤Help🔤❗️❗️ ➡️  command 🍇
            ↩️ 🏃 command context ❗️
          🍉
        🍉
      🍉
    🍉
    
    💭 when all fails throw unknown command error
    🚨🆕✋🤦❗️  💭 throw error
  🍉

  📗 Built in way to handle errors. This isn't needed, but could be used in the catch statement if the user doesn't want to override stuff. 📗
  🔓 ❗️ ⚕ error ✋ 🍇
    😀🔤An error occured.🔤❗️

    ↪️ error 🙌 🆕✋🤦❗️ 🍇
      😀🔤For an unknown reason the command could not be executed.🔤❗️
    🍉
    ↪️ error 🙌 🆕✋🙎❗️ 🍇
      😀🔤Command not found.🔤❗️
    🍉
    ↪️ error 🙌 🆕✋🛑❗️ 🍇
      😀🔤A required parameter is missing from the command. See help for more details.🔤❗️
    🍉
  🍉
🍉
